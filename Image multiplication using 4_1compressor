clc; 
clear; 
close all;

% Load grayscale images
img1 = imread('cameraman.tif'); % Load first image
img2 = imread('peppers.png');   % Load second image
img2 = imresize(img2, size(img1)); % Resize to match dimensions

% Convert images to grayscale if needed
if size(img1,3) == 3
    img1 = rgb2gray(img1);
end
if size(img2,3) == 3
    img2 = rgb2gray(img2);
end

% Get image size
[rows, cols] = size(img1);

% Initialize output image
output_img = zeros(rows, cols);

% Function to convert integer to 8-bit binary array
int_to_bin_array = @(num) arrayfun(@str2double, num2str(dec2bin(num, 8)));

% Function to negate binary (flip 0s to 1s and 1s to 0s)
 function output = negate(input)
        if input==0
            output=1;
        else
            output=0;
        end
    end

%normal half adder   
        function [sum, carry] = ha(a, b)
            sum = xor(a,b);
            carry = and(a,b);
        end

        %inverted half adder
        function [sum, carry] = invha(a, b)
            sum = xor(a,b);
            carry = and(a,b);
            sum=negate(sum);
            carry=negate(carry);
        end
        %full adder
        function [sum, carry] = fa(a, b, c)
            sum = xor(xor(a, b), c); 
            carry = (a & b) | (c & (a ^ b)); 
        end

        %inverted fulladder
        function [sum, carry] = invfa(a, b, c)
            sum = xor(xor(a, b), c); 
            carry = (a & b) | (c & (a ^ b)); 
            sum=negate(sum);
            carry=negate(carry);
        end

        %5:2 compressor
        function [sum, carry] = comp52(x1, x2, x3, x4, x5)
            s = xor(xor(x1, x2), ~xor(x3, x4));  
            c = ((x1 | x2) & (x3 | x4) & (xor(x1, x2) & ~xor(x3, x4)));
            sum = xor(x5, s);
            carry = ~(x5 | s) | c;
        end

        %inverted 5:2 compressor
        function [sum, carry] = invcomp52(x1, x2, x3, x4, x5)
            s = xor(xor(x1, x2), ~xor(x3, x4));  
            c = ((x1 | x2) & (x3 | x4) & (xor(x1, x2) & ~xor(x3, x4)));
            sum = xor(x5, s);
            carry = ~(x5 | s) | c;
            sum=negate(sum);
            carry=negate(carry);
        end

for r = 1:rows
    for c = 1:cols
        % Convert pixel values to binary
        a_bin = int_to_bin_array(img1(r, c));
        b_bin = int_to_bin_array(img2(r, c));
        b_bin = fliplr(b_bin); % Flip second binary number

        % 8x8 multiplication logic
        aarr = zeros(8, 8);
        for i = 1:8
            for j = 1:8
                aarr(i, j) = b_bin(i) .* a_bin(j);
            end
        end
        
        % Apply inversion step
        a = 3;
        for b = 1:8
            if a < 8
                a = a + 1;
            end
            for i = 1:a
                aarr(b, i) = negate(aarr(b, i));
            end
        end
        aarr(8,8) = negate(aarr(8,8));

        %truncated
        [s27, c27] = ha(aarr(1,7),aarr(2,8));
        [s28, c28] = fa(aarr(1,6),aarr(2,7),aarr(3,8));
        [s29, c29] = comp52(aarr(1,5),aarr(2,6),aarr(3,7),aarr(4,8),0);
        [s30, c30] = ha(c27,s28);
        [s31, c31] = fa(c28,s29,c30);
        [s32, c32] = ha(c29,c31  );

    
        % First step reduction
        [s1, c1] = invfa(aarr(1,3), aarr(2,4),c32);
        [s2, c2] = invcomp52(0, aarr(1,2), aarr(2,3), aarr(3,4), aarr(4,5));
        [s3, c3] = invcomp52(aarr(1,1), aarr(2,2), aarr(3,3), aarr(4,4), aarr(5,5));
        [s4, c4] = invcomp52(aarr(2,1), aarr(3,2), aarr(4,3), aarr(5,4), 0);
        [s5, c5] = invfa(aarr(3,1), aarr(4,2), aarr(5,3));
        [s6, c6] = invha(aarr(4,1), aarr(5,2));
    
        % Second step reduction
        [s7, c7] = comp52(aarr(1,4), aarr(2,5), aarr(3,6), aarr(4,7), aarr(5,8));
        [s8, c8] = comp52(s1, aarr(3,5), aarr(4,6), aarr(5,7), aarr(6,8));
        [s9, c9] = comp52(c1, s2, aarr(5,6), aarr(6,7), aarr(7,8));
        [s10, c10] = comp52(c2, s3, aarr(6,6), aarr(7,7), aarr(8,8));
        [s11, c11] = comp52(c3, s4, aarr(6,5), aarr(7,6), aarr(8,7));
        [s12, c12] = comp52(c4, s5, aarr(6,4), aarr(7,5), aarr(8,6));
        [s13, c13] = comp52(c5, s6, aarr(6,3), aarr(7,4), aarr(8,5));
        [s14, c14] = comp52(c6, aarr(5,1), aarr(6,2), aarr(7,3), aarr(8,4));
        [s15, c15] = fa(aarr(6,1), aarr(7,2), aarr(8,3));
        [s16, c16] = ha(aarr(7,1), aarr(8,2));
    
        % Third step reduction
        [s17, c17] = ha(c7, s8);
        [s18, c18] = fa(c17, c8, s9);
        [s19, c19] = fa(c18, c9, s10);
        [s20, c20] = fa(c19, c10, s11);
        [s21, c21] = fa(c20, c11, s12);
        [s22, c22] = fa(c21, c12, s13);
        [s23, c23] = fa(c22, c13, s14);
        [s24, c24] = fa(c23, c14, s15);
        [s25, c25] = fa(c24, c15, s16);
        [s26, c26] = fa(c25, c16, aarr(8,1));

        

     
        % Output computation
        output = [c26, s26, s25, s24, s23, s22, s21, s20, s19, s18, s17, s7, s31, s30, s27, aarr(1,8)];
         
        % Convert binary result to decimal pixel value
        output_img(r, c) = bin2dec(sprintf('%d', output));
    end
end

% Display the output image
figure;
imshow(uint8(output_img));
title('Multiplied Image');

