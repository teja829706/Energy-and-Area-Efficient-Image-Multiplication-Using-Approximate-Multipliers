clc; 
clear; 
close all;

% Load grayscale images
img1 = imread('cameraman.tif'); % Load first image
img2 = imread('peppers.png');   % Load second image
img2 = imresize(img2, size(img1)); % Resize to match dimensions

% Convert images to grayscale if needed
if size(img1,3) == 3
    img1 = rgb2gray(img1);
end
if size(img2,3) == 3
    img2 = rgb2gray(img2);
end

% Get image size
[rows, cols] = size(img1);

% Initialize output image
output_img = zeros(rows, cols);

% Function to convert integer to 8-bit binary array
int_to_bin_array = @(num) arrayfun(@str2double, num2str(dec2bin(num, 8)));

% Function to negate binary (flip 0s to 1s and 1s to 0s)
negate = @(x) ~x;

for r = 1:rows
    for c = 1:cols
        % Convert pixel values to binary
        a_bin = int_to_bin_array(img1(r, c));
        b_bin = int_to_bin_array(img2(r, c));
        b_bin = fliplr(b_bin); % Flip second binary number

        % 8x8 multiplication logic
        aarr = zeros(8, 8);
        for i = 1:8
            for j = 1:8
                aarr(i, j) = b_bin(i) .* a_bin(j);
            end
        end
        
        % Apply inversion step
        a = 3;
        for b = 1:8
            if a < 8
                a = a + 1;
            end
            for i = 1:a
                aarr(b, i) = negate(aarr(b, i));
            end
        end
        aarr(8,8) = negate(aarr(8,8));

        % Reduction steps
        [s1, c1] = deal(xor(aarr(1,3), aarr(2,4)), and(aarr(1,3), aarr(2,4)));
        [s2, c2] = deal(xor(xor(0, aarr(1,2)), xor(aarr(2,3), aarr(3,4))), and(0, aarr(1,2)));
        [s3, c3] = deal(xor(xor(aarr(1,1), aarr(2,2)), xor(aarr(3,3), aarr(4,4))), and(aarr(1,1), aarr(2,2)));

        % Final output array
        output_bin = [c3, s3, s2, s1, c1, 0, 0, 0]; % Example final binary array
        
        % Convert binary result to decimal pixel value
        output_img(r, c) = bin2dec(sprintf('%d', output_bin));
    end
end

% Display the output image
figure;
imshow(uint8(output_img));
title('Multiplied Image');
